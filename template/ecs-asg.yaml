Parameters:
  MyKeyPairName:
    Type: String
  MyImageId:
    Type: String
  ExportVpcStackName:
    Description: The name of the vpc Stack
    Type: String
  InstanceType:
    Default: 't3.large'
    Type: String
#   VpcId:
#     Type: AWS::EC2::VPC::Id
#     Description: >-
#       Select a VPC that allows instances to access the Internet. Select same VPC
#       in which LoadBalancer was created.
#   SubnetId:
#     Type: 'List<AWS::EC2::Subnet::Id>'
#     Description: >-
#       Select at two subnets in your selected VPC. Select same Subnets in which
#       LoadBalancer was created.
  SSHLocation:
   Description: The IP address range that can be used to SSH to the EC2 instances
   Type: String
   MinLength: 9
   MaxLength: 18
   Default: 0.0.0.0/0
   AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
   ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.


Resources:
  AsgLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template
      LaunchTemplateData:
        CreditSpecification:
          CpuCredits: Unlimited
        ImageId: !Ref MyImageId
        IamInstanceProfile:
          Arn: !GetAtt
            - EC2InstanceProfile
            - Arn
        InstanceType: !Ref InstanceType
        KeyName: !Ref MyKeyPairName
        Monitoring:
          Enabled: True
        SecurityGroupIds:
            - Fn::ImportValue: !Sub ${ExportVpcStackName}-WebServerSecurityGroup
        UserData:
          Fn::Base64: !Sub
          - |
            #!/bin/bash
            mkdir /etc/ecs
            echo "ECS_CLUSTER=spring-cluster" >> /etc/ecs/ecs.config
          - {
            }
  ApplicationAsg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: ApplicationAsg
      MinSize: '1'
      MaxSize: '3'
      DesiredCapacity: '2'
      HealthCheckGracePeriod: 300
      LaunchTemplate:
        LaunchTemplateId: !Ref AsgLaunchTemplate
        Version: !GetAtt AsgLaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier: 
          - Fn::ImportValue: !Sub ${ExportVpcStackName}-PrivateSubnet1
          - Fn::ImportValue: !Sub ${ExportVpcStackName}-PrivateSubnet2
      TargetGroupARNs: 
           - Fn::ImportValue: 
              !Sub ${ExportVpcStackName}-TargetGroup
      
  # WebServerSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: Enable HTTP access via port 80
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: '32768'
  #         ToPort: '61000'
  #         SourceSecurityGroupId: 
  #            Fn::ImportValue: 
  #              !Sub ${ExportVpcStackName}-ELBWebServerSecurityGroup
  #       - IpProtocol: tcp
  #         FromPort: '22'
  #         ToPort: '22'
  #         CidrIp:
  #           Ref: SSHLocation
  #     VpcId: !Ref VpcId

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: EC2InstanceProfile
      Path: /
      Roles: [!Ref 'EC2Role']

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'ecs:CreateCluster'
              - 'ecs:DeregisterContainerInstance'
              - 'ecs:DiscoverPollEndpoint'
              - 'ecs:Poll'
              - 'ecs:RegisterContainerInstance'
              - 'ecs:StartTelemetrySession'
              - 'ecs:Submit*'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
              - 'ecr:GetAuthorizationToken'
              - 'ecr:BatchGetImage'
              - 'ecr:GetDownloadUrlForLayer'
            Resource: '*'
